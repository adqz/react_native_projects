----------Naming conventions----------
1. Fat arrow functions: Camel case, initial is capital
2. Variables: camel case, initial is small
3. .js files: camel case, initial is capital
4. Component names: same as .js files coz they share same name


----------App.js----------

1. We write jsx in react which is then converted to javascript by this thing called "babel" which is a javascript compiler running in the react-native bundler
2. "createStackNavigator" is an object which stores what content will be shown on the screen at any given point in time
3. 



--------ComponentsScreen.js------------

1. "StyleSheet.create" validates the properties so we get better error messages if we misspell any property (eg - fontsize instead of fontSize)


----------CounterScreen.js----------
1. 'useState()' function needs to be used to initialize a variable as a state
2. A state's value can't be changed directly. Its respective function needs to be used to update it. For example - 

const [counter, setCounter] = useState(0); //initialize with default value of 0
setCounter(counter+1) //to increase value of counter by 1

Cannot do this:  counter = counter + 1;

3. When state value is changed, the whole component get re-rendered. Also, all children of the component get re-rendered too.


----------ColorScreen.js----------
1. Use back ticks for string formatting. For eg - 
A = 234.134;
B = 252.345;

ans = `${A} + ${B} = ${A+B}` // these are backpacks, not single quotes

----------BoxScreen.js----------
1. Box object model is used just for a single element
2. Flex model is used to place children element relative to each other inside a parent. It controls the layout of the children components but is applied on the parent.
3. flexDirection decides direction of the primary axis along which to align items whereas justifyContent lays out children along the primary axis
4. alignSelf is applied on children and overrides alignItem for that child only
5. flex decides how much space each child gets 
